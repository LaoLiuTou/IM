<?xml version="1.0" encoding="UTF-8"?>
<beans
xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:p="http://www.springframework.org/schema/p"
xmlns:tx="http://www.springframework.org/schema/tx"
xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc/jdbc.properties"/>
</bean>
<!--<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
	<property name="driverClassName" value="${driverClassName}"/>
	<property name="url" value="${url}"/>
	<property name="username" value="${username}"/>
	<property name="password" value="${password}"/>
</bean>-->
<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
	<property name="driverClassName"><value>${driverClassName}</value></property>
	<property name="url"><value>${url}</value></property> 
	<property name="username"><value>${username}</value></property>
	<property name="password"><value>${password}</value></property>
	<property name="maxActive"><value>255</value></property> 
	<property name="maxIdle"><value>2</value></property>
	<property name="maxWait"><value>120000</value></property>
</bean>
<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	<property name="configLocation"><value>classpath:Configuration.xml</value></property>
	<property name="dataSource"><ref bean="dataSource"/></property>
 </bean>
<bean id="sqlSessionTemplate_app" class="org.mybatis.spring.SqlSessionTemplate">
	<constructor-arg index="0" ref="sqlSessionFactory" />
</bean>
<!-- 该 BeanPostProcessor 将自动起作用，对标注 @Autowired 的 Bean 进行自动注入 -->
<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>
<!-- 配置事务管理器 -->
<bean id="transactionManager"
	class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
	p:dataSource-ref="dataSource">
</bean>
<!-- 配置多个事务管理器 -->
<!--<bean id="tran_1"
	class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
	p:dataSource-ref="dataSource">
	<qualifier value="tran_1"/>
</bean>
@Transactional("tran_1")
-->
<!-- enables scanning for @Transactional annotations -->
<tx:annotation-driven transaction-manager="transactionManager"/>

<bean id="threadPoolTaskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
	<!-- 核心线程数，默认为1 -->
	<property name="corePoolSize" value="10" />
	<!-- 最大线程数，默认为Integer.MAX_VALUE -->
	<property name="maxPoolSize" value="50" />
	<!-- 队列最大长度，一般需要设置值>=notifyScheduledMainExecutor.maxNum；默认为Integer.MAX_VALUE 
		<property name="queueCapacity" value="1000" /> -->
	<!-- 线程池维护线程所允许的空闲时间，默认为60s -->
	<property name="keepAliveSeconds" value="300" />
	<!-- 线程池对拒绝任务（无线程可用）的处理策略，目前只支持AbortPolicy、CallerRunsPolicy；默认为后者 -->
	<property name="rejectedExecutionHandler">
	<!-- AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 -->
	<!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 -->
	<!-- DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
	<!-- DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
	<bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
	</property>
</bean>

<bean id="iChataddressMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
	<property name="mapperInterface" value="com.im.dao.chataddress.IChataddressMapper "/>
	<property name="sqlSessionFactory" ref="sqlSessionFactory" />
</bean>
<bean id="iChataddressService" class="com.im.service.chataddress.ChataddressServiceImpl"></bean>
<bean id="iChatfriendMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
	<property name="mapperInterface" value="com.im.dao.chatfriend.IChatfriendMapper "/>
	<property name="sqlSessionFactory" ref="sqlSessionFactory" />
</bean>
<bean id="iChatfriendService" class="com.im.service.chatfriend.ChatfriendServiceImpl"></bean>
<bean id="iChatgroupMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
	<property name="mapperInterface" value="com.im.dao.chatgroup.IChatgroupMapper "/>
	<property name="sqlSessionFactory" ref="sqlSessionFactory" />
</bean>
<bean id="iChatgroupService" class="com.im.service.chatgroup.ChatgroupServiceImpl"></bean>
<bean id="iChatmessageMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
	<property name="mapperInterface" value="com.im.dao.chatmessage.IChatmessageMapper "/>
	<property name="sqlSessionFactory" ref="sqlSessionFactory" />
</bean>
<bean id="iChatmessageService" class="com.im.service.chatmessage.ChatmessageServiceImpl"></bean>
<bean id="iChatuserMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
	<property name="mapperInterface" value="com.im.dao.chatuser.IChatuserMapper "/>
	<property name="sqlSessionFactory" ref="sqlSessionFactory" />
</bean>
<bean id="iChatuserService" class="com.im.service.chatuser.ChatuserServiceImpl"></bean>
<bean id="iGroupuserMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
	<property name="mapperInterface" value="com.im.dao.groupuser.IGroupuserMapper "/>
	<property name="sqlSessionFactory" ref="sqlSessionFactory" />
</bean>
<bean id="iGroupuserService" class="com.im.service.groupuser.GroupuserServiceImpl"></bean>
<bean id="iMessagebackupMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
	<property name="mapperInterface" value="com.im.dao.messagebackup.IMessagebackupMapper "/>
	<property name="sqlSessionFactory" ref="sqlSessionFactory" />
</bean>
<bean id="iMessagebackupService" class="com.im.service.messagebackup.MessagebackupServiceImpl"></bean>
</beans>
